{"version":3,"sources":["fetchBets.js","oddsFormat.js","postBets.js","slipBets.js","App.jsx","Bet.jsx","Bets.jsx","Options.jsx","Slip.jsx","SlipBet.jsx","actionTypes.js","BetsContainer.js","OptionsContainer.js","SlipContainer.js","helpers.js","initialize.js","bets.js","index.js","postedBets.js","status.js"],"names":[],"mappings":"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","file":"public/app.js","sourcesContent":["import { FETCH_BETS_REQUEST, FETCH_BETS_ERROR, FETCH_BETS_SUCCESS } from '../constants/actionTypes'\nimport { checkStatus, parseJSON } from '../helpers'\nimport 'whatwg-fetch'\n\nfunction fetchBetsRequest() {\n  return {\n    type: FETCH_BETS_REQUEST\n  }\n}\n\nexport function fetchBets(url = 'https://bedefetechtest.herokuapp.com/v1/markets') {\n  return (dispatch) => {\n    dispatch(fetchBetsRequest)\n    return fetch(url)\n          .then(checkStatus)\n          .then(parseJSON)\n    // In development (or an environment with a no internet),\n    // comment out above three lines, and uncomment these two:\n    // return Promise.resolve(JSON.stringify([{\"bet_id\":1,\"event\":\"Next World Cup\",\"name\":\"England\",\"odds\":{\"numerator\":10,\"denominator\":1}},{\"bet_id\":2,\"event\":\"Next World Cup\",\"name\":\"Brazil\",\"odds\":{\"numerator\":2,\"denominator\":1}},{\"bet_id\":3,\"event\":\"Next World Cup\",\"name\":\"Spain\",\"odds\":{\"numerator\":3,\"denominator\":1}},{\"bet_id\":4,\"event\":\"Next World Cup\",\"name\":\"Germany\",\"odds\":{\"numerator\":1,\"denominator\":1}},{\"bet_id\":5,\"event\":\"Ryder Cup\",\"name\":\"Europe\",\"odds\":{\"numerator\":7,\"denominator\":4}},{\"bet_id\":6,\"event\":\"Ryder Cup\",\"name\":\"USA\",\"odds\":{\"numerator\":9,\"denominator\":2}}]))\n    //       .then(response => JSON.parse(response))\n          .then(response => dispatch(fetchBetsSuccess(response)))\n          .catch(error => dispatch(fetchBetsError(error)))\n  }\n}\n\nexport function fetchBetsError(message = 'Sorry, there was an error loading.') {\n  return {\n    type: FETCH_BETS_ERROR,\n    message\n  }\n}\n\nexport function fetchBetsSuccess(bets) {\n  return {\n    type: FETCH_BETS_SUCCESS,\n    bets\n  }\n}\n","import { VIEW_AS_DECIMAL, VIEW_AS_FRACTIONAL } from '../constants/actionTypes'\nimport { viewAsFractional, viewAsDecimal } from '../actions/oddsFormat'\n\nexport default function oddsFormat(state = 'FRACTIONAL', action) {\n  switch(action.type) {\n    case VIEW_AS_DECIMAL:\n      return 'DECIMAL'\n    case VIEW_AS_FRACTIONAL:\n      return 'FRACTIONAL'\n    default:\n      return state\n  }\n}\n","import { POST_BET_REQUEST, POST_BET_ERROR, POST_BET_SUCCESS } from '../constants/actionTypes'\nimport { checkStatus, parseJSON } from '../helpers'\nimport 'whatwg-fetch'\n\nfunction postBetRequest(id) {\n  return {\n    type: POST_BET_REQUEST,\n    id\n  }\n}\n\n/**\n * The bets are held in the app state in the form of a Map.\n * Convert to an array of objects, which can then be parsed to JSON for POSTing.\n */\nfunction preparePostData(slipBets) {\n  return [...slipBets.keys()].map(betID => {\n    return {\n      'bet_id': slipBets.getIn([betID, 'bet_id']),\n      'odds': {\n        'numerator': slipBets.getIn([betID, 'odds', 'numerator']),\n        'denominator': slipBets.getIn([betID, 'odds', 'denominator'])\n      },\n      'stake': slipBets.getIn([betID, 'stake'])\n    }\n  })\n}\n\nexport function postBets(bets, url = 'https://bedefetechtest.herokuapp.com/v1/bets') {\n  return (dispatch) => {\n    const betsArr = preparePostData(bets)\n\n    for (let bet of betsArr) {\n      let id = bet['bet_id']\n      dispatch(postBetRequest(id))\n      return fetch(url, { method: 'post', headers: { 'Content-type': 'application/json' }, body: JSON.stringify(bet) })\n            .then(checkStatus)\n            .then(response => dispatch(postBetSuccess(id, response)))\n            .catch(error => dispatch(postBetError(id, error)))\n    }\n  }\n}\n\nexport function postBetError(id, message = 'Sorry, there was an error posting.') {\n  return {\n    type: POST_BET_ERROR,\n    id,\n    message\n  }\n}\n\nexport function postBetSuccess(id, parsedResponse) {\n  return {\n    type: POST_BET_SUCCESS,\n    id,\n    parsedResponse\n  }\n}\n","import Immutable from 'immutable'\nimport { SET_SLIP_BET, UNSET_SLIP_BET, CLEAR_SLIP_BETS, SET_STAKE, POST_BETS_SUCCESS } from '../constants/actionTypes'\nimport { payoutCalculator } from '../helpers'\n\nfunction addSlipProps(betMap) {\n  return betMap.set('stake', 0).set('payout', 0)\n}\n\nexport default function slipBets(state = Immutable.Map(), action) {\n  switch(action.type) {\n    case SET_SLIP_BET:\n      return state.set(action.id, addSlipProps(action.value))\n    case UNSET_SLIP_BET:\n      return state.delete(action.id)\n    case CLEAR_SLIP_BETS:\n      return state.clear()\n    case POST_BETS_SUCCESS:\n      return state.delete(action.id)\n    case SET_STAKE:\n      const num = state.getIn([action.id, 'odds', 'numerator'])\n      const den = state.getIn([action.id, 'odds', 'denominator'])\n      return state.setIn([action.id, 'stake'], action.value)\n                  .setIn([action.id, 'payout'], payoutCalculator(action.value, num, den))\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport OptionsContainer from '../containers/OptionsContainer'\nimport BetsContainer from '../containers/BetsContainer'\nimport SlipContainer from '../containers/SlipContainer'\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"betting-app__main__wrapper\">\n        <OptionsContainer />\n        <main className=\"betting-app__main\">\n          <BetsContainer />\n          <SlipContainer />\n        </main>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { oddsFormatter } from '../helpers'\n\nexport default function Bet({ bet, oddsFormat, onSetSlipBetClick }) {\n  const odds = oddsFormatter(oddsFormat, bet.getIn(['odds', 'numerator']), bet.getIn(['odds', 'denominator']))\n  return (\n    <li className=\"bet bet--available\" onClick={ onSetSlipBetClick }>\n      <p className=\"bet__text\">\n        <strong className=\"bet__name\">{ bet.get('name') }</strong> to win the <strong className=\"bet__event\">{ bet.get('event') }</strong> at <strong className=\"bet__odds\">{ odds }</strong>\n      </p>\n    </li>\n  )\n}\n","import React from 'react'\nimport Bet from './Bet'\n\nexport default function Bets({ bets, status, oddsFormat, onLoadBetsClick, onSetSlipBetClick }) {\n  const betDisplay = do {\n    if(status.get('loading')) {\n      (<li>Bets loading...</li>)\n    } else if(status.get('loadError')) {\n      (<li>There was an error loading the bets, please refresh and try again.</li>)\n    } else {\n      bets.keySeq().map(betID => (\n        <Bet\n          key={ betID }\n          bet={ bets.get(betID) }\n          oddsFormat={ oddsFormat }\n          onSetSlipBetClick={ () => onSetSlipBetClick(betID, bets.get(betID)) }\n        />\n      ))\n    }\n  }\n\n  return (\n    <section className=\"betting-app__main-section betting-app__bets\">\n      <ul className=\"bets\">\n        { betDisplay }\n      </ul>\n      { do { if(!status.get('loaded')) {(\n        <div className=\"btn__group bet__controls\">\n           <button className=\"btn bet__control\" onClick={ onLoadBetsClick }>Load Bets</button>\n        </div>\n      )}}}\n    </section>\n  )\n}\n","import React from 'react'\n\nexport default function Options({ oddsFormat, onViewAsFractionalClick, onViewAsDecimalClick }) {\n  return(\n    <nav className=\"btn__nav-group\">\n      <button className=\"btn\">View Bet history</button>\n      {\n        oddsFormat === 'FRACTIONAL' ? (<button onClick={ () => onViewAsDecimalClick() } className=\"btn\">Show decimal odds</button>)\n                                    : (<button onClick={ () => onViewAsFractionalClick() } className=\"btn\">Show fractional odds</button>)\n      }\n    </nav>\n  )\n}\n","import React from 'react'\nimport SlipBet from './SlipBet'\n\nexport default function Slip({ slipBets, oddsFormat, onUnsetSlipBetClick, onClearSlipBetsClick, onSetStakeClick, onPostBetsClick }) {\n  return (\n    <section className=\"betting-app__main-section betting-app__slip\">\n      <ul className=\"bets\">\n      { slipBets.size === 0 ? (<li className=\"notabet\"><p>No bets on your slip.</p></li>)\n                            : slipBets.keySeq().map(betID => (\n        <SlipBet\n          key={ betID }\n          slipBet={ slipBets.get(betID) }\n          oddsFormat={ oddsFormat }\n          onUnsetSlipBetClick={ () => onUnsetSlipBetClick(betID) }\n          onSetStakeClick={ onSetStakeClick }\n        />\n      ))}\n      </ul>\n      { do { if( slipBets.size > 0) {(\n        <div className=\"btn__group bet__controls\">\n          <button className=\"btn bet__control\" onClick={ onClearSlipBetsClick }>Clear all bets on slip</button>\n          <button className=\"btn btn--request bet__control\"  onClick={ () => onPostBetsClick(slipBets) }>Submit these bets</button>\n        </div>\n      )}}}\n    </section>\n  )\n}\n","import React, { Component } from 'react'\nimport { payoutCalculator, oddsFormatter } from '../helpers'\n\nexport default class SlipBet extends Component {\n  state = {\n    stake: this.props.slipBet.get('stake'),\n    payout: 0\n  }\n\n  handleStakeChange = (e) => this.setState({\n    stake: e.target.value,\n    payout: payoutCalculator(e.target.value, this.props.slipBet.getIn(['odds', 'numerator']), this.props.slipBet.getIn(['odds', 'denominator']))\n  })\n\n  render() {\n    // I'm doing zero validation, just shoving a class on to indicate bets are submittable.\n    // Nothing will go wrong if the bets are submitted with a stake of 0, so v0v\n    // NOTE: it checks **props** NOT **component state**, props must be nonzero to bet.\n    const submittableClass = this.props.slipBet.get('stake') > 0 ? 'bet--submittable' : 'bet--unsubmittable'\n    const odds = oddsFormatter(this.props.oddsFormat, this.props.slipBet.getIn(['odds', 'numerator']), this.props.slipBet.getIn(['odds', 'denominator']))\n\n    return (\n      <li className={ `bet bet--onslip ${submittableClass}` }>\n        <div className=\"bet__text\">\n          <p className=\"bet__reminder\"><strong className=\"bet__name\">{ this.props.slipBet.get('name') }</strong> to win the <strong className=\"bet__event\">{ this.props.slipBet.get('event') }</strong> at <strong className=\"bet__odds\">{ odds }</strong></p>\n          <p className=\"bet__stake\">A bet of <strong>£<input className=\"text-input bet__stake__input\" onBlur={ () => this.props.onSetStakeClick(this.props.slipBet.get('bet_id'), this.state.stake) } onChange={ this.handleStakeChange } value={ this.state.stake } /></strong> nets you <strong className=\"bet__payout\">£{ this.state.payout }</strong></p>\n        </div>\n        <div className=\"btn__group bet__controls\">\n          <button className=\"btn bet__control\" onClick={ this.props.onUnsetSlipBetClick }>Remove bet from slip</button>\n          <button className=\"btn btn--request bet__control\" onClick={ () => this.props.onSetStakeClick(this.props.slipBet.get('bet_id'), this.state.stake) } >Set stake</button>\n        </div>\n      </li>\n    )\n  }\n}\n","export const FETCH_BETS_REQUEST = 'FETCH_BETS_REQUEST'\nexport const FETCH_BETS_ERROR = 'FETCH_BETS_ERROR'\nexport const FETCH_BETS_SUCCESS = 'FETCH_BETS_SUCCESS'\n\nexport const SET_SLIP_BET = 'SET_SLIP_BET'\nexport const UNSET_SLIP_BET = 'UNSET_SLIP_BET'\nexport const CLEAR_SLIP_BETS = 'CLEAR_SLIP_BETS'\n\nexport const SET_STAKE = 'SET_STAKE'\n\nexport const POST_BET_REQUEST = 'POST_BET_REQUEST'\nexport const POST_BET_ERROR = 'POST_BET_ERROR'\nexport const POST_BET_SUCCESS = 'POST_BET_SUCCESS'\n\nexport const VIEW_AS_DECIMAL = 'VIEW_AS_DECIMAL'\nexport const VIEW_AS_FRACTIONAL = 'VIEW_AS_FRACTIONAL'\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Bets from '../components/Bets'\nimport { fetchBets } from '../actions/fetchBets'\nimport { setSlipBet } from '../actions/slipBets'\n\nconst mapStateToProps = (state) => {\n  return {\n    bets: state.bets.filterNot((bet, betID) => state.slipBets.keySeq().includes(betID)),\n    oddsFormat: state.oddsFormat,\n    status: state.status\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onLoadBetsClick: () => dispatch(fetchBets()),\n    onSetSlipBetClick: (id, value) => dispatch(setSlipBet(id, value))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bets)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { viewAsFractional, viewAsDecimal } from '../actions/oddsFormat'\nimport Options from '../components/Options'\n\nconst mapStateToProps = (state) => {\n  return {\n    oddsFormat: state.oddsFormat,\n    postedBets: state.postedBets\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onViewAsFractionalClick: () => dispatch(viewAsFractional()),\n    onViewAsDecimalClick: () => dispatch(viewAsDecimal())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Options)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Slip from '../components/Slip'\nimport { unsetSlipBet, clearSlipBets, setStake } from '../actions/slipBets'\nimport { postBets } from '../actions/postBets'\n\nconst mapStateToProps = (state) => {\n  return {\n    slipBets: state.slipBets,\n    oddsFormat: state.oddsFormat\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onClearSlipBetsClick: () => dispatch(clearSlipBets()),\n    onUnsetSlipBetClick: (id) => dispatch(unsetSlipBet(id)),\n    onSetStakeClick: (id, value) => dispatch(setStake(id, value)),\n    onPostBetsClick: (slipBets) => dispatch(postBets(slipBets))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Slip)\n","/**\n * The promise returned from `fetch()` does not reject on HTTP error status.\n * ∴ a handler function must be provided: errors need to be displayed.\n */\nexport function checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    const error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n}\n\n/** JSON is expected as a response. */\nexport function parseJSON(response) {\n  return response.json()\n}\n\n/* Calculate a payout based on fractional odds.\n * NOTE: the stake comes via an input; it needs to be coerced to a number. */\nexport function payoutCalculator(stake, numerator, denominator) {\n  const calc = ((numerator / denominator) * Number(stake)) + Number(stake)\n  return calc.toFixed(2)\n}\n\n\nexport function oddsFormatter(format, numerator, denominator) {\n  return new Map([\n    ['FRACTIONAL', `${numerator}-${denominator}`],\n    /* NOTE: the `number` wrapping the calculation is to remove trailing zeroes */\n    ['DECIMAL', `${Number((numerator / denominator + 1).toFixed(2))}`]\n  ]).get(format)\n}\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport createLogger from 'redux-logger'\nimport reducer from './reducers'\nimport App from 'components/App'\n\nconst logger = createLogger()\nconst store = createStore(reducer, applyMiddleware(thunk, logger))\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.querySelector('#root')\n  )\n})\n","import Immutable from 'immutable'\nimport { FETCH_BETS_REQUEST, FETCH_BETS_SUCCESS, FETCH_BETS_ERROR } from '../constants/actionTypes'\nimport { fetchBets } from '../actions/fetchBets'\n\n/**\n * Fetched from the API, bets are in the form of an array.\n * Assuming the JSON has already been parsed, reduce this\n * array to an immutable Map keyed by `bet_id`.\n */\nfunction normaliseAndPetrify(bets) {\n  const betsMap = new Map(bets.reduce((map, bet) => [...map, [bet.bet_id, bet]], []))\n  return Immutable.fromJS(betsMap)\n}\n\nexport default function bets(state = Immutable.Map(), action) {\n  switch(action.type) {\n    case FETCH_BETS_REQUEST:\n      return state\n    case FETCH_BETS_SUCCESS:\n      return state.merge(normaliseAndPetrify(action.bets))\n    case FETCH_BETS_ERROR:\n      return state\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport bets from './bets'\nimport slipBets from './slipBets'\nimport oddsFormat from './oddsFormat'\nimport postedBets from './postedBets'\nimport status from './status'\n\nexport default combineReducers({ bets, slipBets, oddsFormat, postedBets, status })\n","import Immutable from 'immutable'\nimport { POST_BET_REQUEST, POST_BET_ERROR, POST_BET_SUCCESS } from '../constants/actionTypes'\n\nfunction preparePostData(slipBets) {\n  return [...slipBets.keys()].map(betID => {\n    return {\n      'bet_id': slipBets.getIn([betID, 'bet_id']),\n      'odds': {\n        'numerator': slipBets.getIn([betID, 'odds', 'numerator']),\n        'denominator': slipBets.getIn([betID, 'odds', 'denominator'])\n      },\n      'stake': slipBets.getIn([betID, 'stake'])\n    }\n  })\n}\n\nfunction normaliseAndPetrify(bet) {\n  return Immutable.fromJS({ [bet['bet_id']]: bet})\n}\n\nexport default function postedBets(state = Immutable.Map(), action) {\n  switch(action.type) {\n    case POST_BET_REQUEST:\n      return state\n    case POST_BET_SUCCESS:\n      return state.merge(normaliseAndPetrify(action.parsedResponse))\n    case POST_BET_ERROR:\n      return state\n    default:\n      return state\n  }\n}\n","import Immutable from 'immutable'\nimport { FETCH_BETS_REQUEST, FETCH_BETS_SUCCESS, FETCH_BETS_ERROR } from '../constants/actionTypes'\n\nexport default function status(state = Immutable.Map([['loading', false],['loaded', false],['loadError', false]]), action) {\n  switch(action.type) {\n    case FETCH_BETS_REQUEST:\n      return state.set('loading', true)\n    case FETCH_BETS_SUCCESS:\n      return state.set('loading', false).set('loaded', true)\n    case FETCH_BETS_ERROR:\n      return state.set('loading', false).set('loadError', true)\n    default:\n      return state\n  }\n}\n"]}